// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	model "github.com/aaanger/ecommerce/internal/user/model"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// AuthUser provides a mock function with given fields: email, password
func (_m *IUserRepository) AuthUser(email string, password string) (*model.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: email, password, role
func (_m *IUserRepository) CreateUser(email string, password string, role string) (*model.User, error) {
	ret := _m.Called(email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.User, error)); ok {
		return rf(email, password, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.User); ok {
		r0 = rf(email, password, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
