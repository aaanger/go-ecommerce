// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	model "github.com/aaanger/ecommerce/internal/order/model"
	mock "github.com/stretchr/testify/mock"
)

// IOrderService is an autogenerated mock type for the IOrderService type
type IOrderService struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: userID, orderID
func (_m *IOrderService) CancelOrder(userID int, orderID int) (*model.Order, error) {
	ret := _m.Called(userID, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*model.Order, error)); ok {
		return rf(userID, orderID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *model.Order); ok {
		r0 = rf(userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: userID, lines
func (_m *IOrderService) CreateOrder(userID int, lines *model.CreateOrderReq) (*model.Order, error) {
	ret := _m.Called(userID, lines)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *model.CreateOrderReq) (*model.Order, error)); ok {
		return rf(userID, lines)
	}
	if rf, ok := ret.Get(0).(func(int, *model.CreateOrderReq) *model.Order); ok {
		r0 = rf(userID, lines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *model.CreateOrderReq) error); ok {
		r1 = rf(userID, lines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: userID
func (_m *IOrderService) GetAllOrders(userID int) ([]model.Order, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: userID, orderID
func (_m *IOrderService) GetOrderByID(userID int, orderID int) (*model.Order, error) {
	ret := _m.Called(userID, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*model.Order, error)); ok {
		return rf(userID, orderID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *model.Order); ok {
		r0 = rf(userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: userID, orderID, status
func (_m *IOrderService) UpdateOrderStatus(userID int, orderID int, status string) (*model.Order, error) {
	ret := _m.Called(userID, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) (*model.Order, error)); ok {
		return rf(userID, orderID, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) *model.Order); ok {
		r0 = rf(userID, orderID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(userID, orderID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOrderService creates a new instance of IOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderService {
	mock := &IOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
