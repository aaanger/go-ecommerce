// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	model "github.com/aaanger/ecommerce/internal/order/model"
	mock "github.com/stretchr/testify/mock"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: userID, lines
func (_m *IOrderRepository) CreateOrder(userID int, lines []model.OrderLine) (*model.Order, error) {
	ret := _m.Called(userID, lines)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []model.OrderLine) (*model.Order, error)); ok {
		return rf(userID, lines)
	}
	if rf, ok := ret.Get(0).(func(int, []model.OrderLine) *model.Order); ok {
		r0 = rf(userID, lines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int, []model.OrderLine) error); ok {
		r1 = rf(userID, lines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: userID
func (_m *IOrderRepository) GetAllOrders(userID int) ([]model.Order, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: userID, orderID
func (_m *IOrderRepository) GetOrderByID(userID int, orderID int) (*model.Order, error) {
	ret := _m.Called(userID, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*model.Order, error)); ok {
		return rf(userID, orderID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *model.Order); ok {
		r0 = rf(userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: userID, orderID, status
func (_m *IOrderRepository) UpdateOrder(userID int, orderID int, status string) error {
	ret := _m.Called(userID, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string) error); ok {
		r0 = rf(userID, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
