// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	model "github.com/aaanger/ecommerce/internal/cart/model"
	mock "github.com/stretchr/testify/mock"
)

// ICartRepository is an autogenerated mock type for the ICartRepository type
type ICartRepository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: cartID, productID, quantity
func (_m *ICartRepository) AddProduct(cartID int, productID int, quantity int) error {
	ret := _m.Called(cartID, productID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(cartID, productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCart provides a mock function with given fields: userID
func (_m *ICartRepository) CreateCart(userID int) (int, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: cartID, productID
func (_m *ICartRepository) DeleteProduct(cartID int, productID int) error {
	ret := _m.Called(cartID, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(cartID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartByUserID provides a mock function with given fields: userID
func (_m *ICartRepository) GetCartByUserID(userID int) (*model.Cart, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartByUserID")
	}

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Cart, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Cart); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICartRepository creates a new instance of ICartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartRepository {
	mock := &ICartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
